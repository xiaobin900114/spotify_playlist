{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","expiresIn","userID","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","state","term","onSearch","e","setState","target","value","react_default","a","createElement","className","placeholder","onChange","handleTermChange","onClick","React","Component","Track","renderAction","addTrack","removeTrack","isRemoval","track","onAdd","onRemove","name","artist","album","TrackList","_React$Component","apply","arguments","inherits","createClass","key","tracks","map","Components_Track_Track","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","title","playlistTracks","onSave","authorUrl","concat","Spotify","getAccessToken","url","window","location","href","extract","setTimeout","history","pushState","console","log","string","keyword","limiter","startIndex","indexOf","length","endIndex","slice","savePlaylist","trackURIs","fetch","headers","Authorization","then","response","json","jsonResponse","createPlaylist","_this2","Content-Type","body","JSON","stringify","public","method","playlistID","addTracksToPlaylist","searchUrl","items","uri","App","searchSpotify","playlistName","find","savedTrack","push","_loop","i","splice","_this3","_this4","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6785afcd.chunk.js","sourcesContent":["const clientID = 'b0db004c9d2c473f89fbc6190e742a5b';\nconst redirectURI = 'https://xiaobin900114.github.io/spotify_playlist/';\nconst tokenClientID = '19e26044114a49dfa408c0912012a725';\nconst authorUrl = `https://accounts.spotify.com/authorize?client_id=${tokenClientID}&redirect_uri=${redirectURI}&scope=playlist-modify-private&response_type=token&state=123`;\nconst searchUrl = 'https://api.spotify.com/v1/search';\n\nlet accessToken;\nlet expiresIn;\nlet userID;\n\nconst Spotify = {\n\n  getAccessToken() {\n    if(accessToken) {\n      return accessToken;\n    }\n    let url = window.location.href;\n    accessToken = this.extract(url, \"access_token=\", \"&\");\n    if(accessToken) {\n      expiresIn = this.extract(url, \"expires_in=\", \"&\");\n      window.setTimeout(() => accessToken = 'Access Token', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      console.log(\"access token successful retrieved.\");\n      return accessToken;\n    } else {\n      window.location.href = authorUrl;\n    }\n  },\n\n  extract(string, keyword, limiter) {\n    let startIndex = string.indexOf(keyword);\n    if (startIndex !== -1) {\n        // add the length of the keyword to the start position to get the \"real\" start\n        startIndex += keyword.length;\n        let endIndex = string.indexOf(limiter, startIndex);\n        if (endIndex !== -1) {\n            return string.slice(startIndex, endIndex);\n        } else {\n            return string.slice(startIndex);\n        }\n    }\n    return undefined;\n  },\n\n  savePlaylist(name, trackURIs) {\n    return fetch('https://api.spotify.com/v1/me', {headers: {\n      Authorization: 'Bearer ' + this.getAccessToken()\n    }}).then(response => {\n      return response.json()\n    }).then(jsonResponse => {\n      userID = jsonResponse.id;\n      return this.createPlaylist(userID, name, trackURIs);\n    })\n  },\n\n  createPlaylist(userID, name, trackURIs) {\n      const url = `https://api.spotify.com/v1/users/${userID}/playlists`;\n      const headers = {\n        'Authorization': 'Bearer ' + this.getAccessToken(),\n        'Content-Type': 'application/json'\n      };\n      const body = JSON.stringify({name: name, public: false});\n      return fetch(url, {headers: headers, method: 'POST', body: body})\n      .then(response => {return response.json()})\n      .then(jsonResponse => {\n        let playlistID = jsonResponse.id;\n        return this.addTracksToPlaylist(playlistID, trackURIs);\n      })\n  },\n\n  addTracksToPlaylist(playlistID, trackURIs) {\n    const headers = {\n      'Authorization': 'Bearer ' + this.getAccessToken(),\n      'Content-Type': 'application/json'\n    };\n    const body = JSON.stringify(trackURIs);\n    return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n      headers: headers, method: 'POST', body: body\n    })\n  },\n\n  search(term) {\n    return fetch(searchUrl + '?q=' + term + '&type=track',\n      {\n      headers: {\n        Authorization: 'Bearer ' + this.getAccessToken()\n      }\n    }).then(response => {\n      return response.json()\n    }).then(jsonResponse => {\n      if(!jsonResponse.tracks) {\n        return ''\n      } else {\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.name,\n            album: track.album.name,\n            uri: track.uri\n          }\n        })\n      }\n    })\n  },\n\n}\n\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.state={\n      term: '',\n    };\n  };\n\n  search() {\n    this.props.onSearch(this.state.term);\n  };\n\n  handleTermChange(e) {\n    this.setState({\n      term: e.target.value,\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange.bind(this)}/>\n        <button className=\"SearchButton\" onClick={this.search.bind(this)}>SEARCH</button>\n      </div>\n    )\n  }\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderAction.bind(this);\n    this.addTrack.bind(this);\n    this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if(this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack.bind(this, this.props.track)}>-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack.bind(this, this.props.track)}>+</button>\n    }\n  }\n\n  addTrack(track) {\n    this.props.onAdd(track);\n  }\n\n  removeTrack(track) {\n    this.props.onRemove(track);\n  }\n\n  render() {\n    return(\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nexport class TrackList extends React.Component {\n  render() {\n    return(\n      <div className=\"TrackList\">\n        {this.props.tracks.map((track) => {\n            return (\n              <div>\n                <Track key={track.id} track={track} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>\n              </div>\n            )\n          })}\n      </div>\n    )\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList.js'\n\nconst test = {\n  name:'test2',\n  artist:'test2',\n  album:'test2',\n  id: 'test2'\n};\n\nclass SearchResults extends React.Component {\n  render() {\n    return(\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList'\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(e) {\n    return this.props.onNameChange(e.target.value);\n  }\n\n  render() {\n    return(\n      <div className=\"Playlist\">\n        <input value={this.props.title} onChange={this.handleNameChange.bind(this)}/>\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.searchSpotify = this.searchSpotify.bind(this);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n  }\n\n  addTrack(track) {\n    if(this.state.playlistTracks.find((savedTrack) => savedTrack.id === track.id)\n    ){\n      return;\n    } else {\n      this.setState(state => {\n        return state.playlistTracks.push(track);\n      })\n    }\n  }\n\n  removeTrack(track) {\n    for(let i=0; i<this.state.playlistTracks.length; i++) {\n      if(this.state.playlistTracks[i].id === track.id) {\n        this.setState(state => {\n          return state.playlistTracks.splice(i, 1);\n        })\n      }\n    }\n  }\n\n  handleNameChange(name) {\n    this.setState({\n      'playlistName': name,\n    })\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => {return track.uri});\n    const playlistName = this.state.playlistName;\n    Spotify.savePlaylist(playlistName, trackURIs)\n    .then(() => {\n      console.log(`${this.state.playlistName} is created with ${this.state.playlistTracks.length}!`);\n      this.setState({playlistName: 'New Playlist', playlistTracks: []});\n    })\n  }\n\n  searchSpotify(term) {\n    Spotify.search(term).then(tracks => {\n      this.setState({\n        searchResults: tracks\n      })\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.searchSpotify}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist title={this.state.playlistName} playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.handleNameChange} onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}